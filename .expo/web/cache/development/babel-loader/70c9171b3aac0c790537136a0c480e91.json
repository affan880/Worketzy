{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useContext, useEffect, useState } from \"react\";\nimport { auth } from \"../Components/firebase/firebase\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport { createNativeStackNavigator } from \"@react-navigation/native-stack\";\nimport AppStack from \"./appStack\";\nimport AuthStack from \"./authStack\";\nimport { AuthUserContext } from \"./authUserProvider\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar Stack = createNativeStackNavigator();\nexport default function JobTypeSelectorRoute() {\n  var _useContext = useContext(AuthUserContext),\n      user = _useContext.user,\n      setUser = _useContext.setUser;\n\n  var _useState = useState(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      isLoading = _useState2[0],\n      setIsLoading = _useState2[1];\n\n  useEffect(function () {\n    var unsubscribeAuth = auth.onAuthStateChanged(function _callee(authUser) {\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(authUser ? setUser(authUser) : setUser(null));\n\n            case 3:\n              setIsLoading(false);\n              _context.next = 9;\n              break;\n\n            case 6:\n              _context.prev = 6;\n              _context.t0 = _context[\"catch\"](0);\n              console.log(_context.t0);\n\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[0, 6]], Promise);\n    });\n    return unsubscribeAuth;\n  }, []);\n\n  if (isLoading) {}\n\n  return _jsx(NavigationContainer, {\n    children: user ? _jsx(AppStack, {}) : _jsx(AuthStack, {})\n  });\n}","map":{"version":3,"sources":["C:/Users/syeda/Desktop/Github/Projects/Worketzy/Src/Routes/Routes.js"],"names":["React","useContext","useEffect","useState","auth","NavigationContainer","createNativeStackNavigator","AppStack","AuthStack","AuthUserContext","Stack","JobTypeSelectorRoute","user","setUser","isLoading","setIsLoading","unsubscribeAuth","onAuthStateChanged","authUser","console","log"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,SAA5B,EAAuCC,QAAvC,QAAuD,OAAvD;AACA,SAASC,IAAT;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,SAASC,0BAAT,QAA2C,gCAA3C;AACA,OAAOC,QAAP;AACA,OAAOC,SAAP;AACA,SAASC,eAAT;;AAEA,IAAMC,KAAK,GAAGJ,0BAA0B,EAAxC;AAGA,eAAe,SAASK,oBAAT,GAAgC;AAC7C,oBAA0BV,UAAU,CAACQ,eAAD,CAApC;AAAA,MAAQG,IAAR,eAAQA,IAAR;AAAA,MAAcC,OAAd,eAAcA,OAAd;;AACA,kBAAkCV,QAAQ,CAAC,IAAD,CAA1C;AAAA;AAAA,MAAOW,SAAP;AAAA,MAAkBC,YAAlB;;AAEEb,EAAAA,SAAS,CAAC,YAAM;AAEd,QAAMc,eAAe,GAAGZ,IAAI,CAACa,kBAAL,CAAwB,iBAAOC,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CAErCA,QAAQ,GAAGL,OAAO,CAACK,QAAD,CAAV,GAAuBL,OAAO,CAAC,IAAD,CAFD;;AAAA;AAG5CE,cAAAA,YAAY,CAAC,KAAD,CAAZ;AAH4C;AAAA;;AAAA;AAAA;AAAA;AAK5CI,cAAAA,OAAO,CAACC,GAAR;;AAL4C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAxB,CAAxB;AAUA,WAAOJ,eAAP;AACD,GAbQ,EAaN,EAbM,CAAT;;AAeA,MAAIF,SAAJ,EAAe,CAEd;;AACH,SACE,KAAC,mBAAD;AAAA,cACGF,IAAI,GAAG,KAAC,QAAD,KAAH,GAAkB,KAAC,SAAD;AADzB,IADF;AAKD","sourcesContent":["import React, { useContext, useEffect, useState } from \"react\";\r\nimport { auth } from \"../Components/firebase/firebase\";\r\nimport { NavigationContainer } from \"@react-navigation/native\";\r\nimport { createNativeStackNavigator } from \"@react-navigation/native-stack\";\r\nimport AppStack from \"./appStack\";\r\nimport AuthStack from \"./authStack\";\r\nimport { AuthUserContext } from \"./authUserProvider\";\r\n\r\nconst Stack = createNativeStackNavigator();\r\n\r\n\r\nexport default function JobTypeSelectorRoute() {\r\n  const { user, setUser } = useContext(AuthUserContext);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n\r\n    useEffect(() => {\r\n      // onAuthStateChanged returns an unSubscriber\r\n      const unsubscribeAuth = auth.onAuthStateChanged(async (authUser) => {\r\n        try {\r\n          await (authUser ? setUser(authUser) : setUser(null));\r\n          setIsLoading(false);\r\n        } catch (error) {\r\n          console.log(error);\r\n        }\r\n      });\r\n\r\n      // unsubscribe auth listener on unmount\r\n      return unsubscribeAuth;\r\n    }, []);\r\n\r\n    if (isLoading) {\r\n      // return <Spinner />;\r\n    }\r\n  return (\r\n    <NavigationContainer>\r\n      {user ? <AppStack /> : <AuthStack />}\r\n    </NavigationContainer>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}