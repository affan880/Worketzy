{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport React, { useEffect, useRef, useState } from 'react';\nimport { FirebaseRecaptchaVerifierModal } from 'expo-firebase-recaptcha';\nimport { firebaseLogin, getVerificationId } from \"../../../Components/firebase/firebase\";\nimport firebaseConfig from \"../../../Components/firebase/firebaseConfig\";\nimport Form from \"../../../Components/forms/form\";\nimport FormErrorMessage from \"../../../Components/forms/formErrorMessage\";\nimport FormButton from \"../../../Components/forms/formButton\";\nimport FormField from \"../../../Components/forms/formField\";\nimport SafeView from \"../../../Components/safeView\";\nimport Spinner from \"../../../Components/spinner\";\nimport Colors from \"../../../utils/Colors\";\nimport { validationSchemaPhone, validationSchemaCode } from \"../../../Validation/InputValidation\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar RESEND_OTP_TIME_LIMIT = 30;\nvar resendOtpTimerInterval;\nexport default function LoginScreen(_ref) {\n  var navigation = _ref.navigation;\n  var recaptchaVerifier = useRef(null);\n\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      loginError = _useState2[0],\n      setLoginError = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      verificationId = _useState4[0],\n      setVerificationId = _useState4[1];\n\n  var _useState5 = useState(\"\"),\n      _useState6 = _slicedToArray(_useState5, 2),\n      codeError = _useState6[0],\n      setCodeError = _useState6[1];\n\n  var _useState7 = useState(null),\n      _useState8 = _slicedToArray(_useState7, 2),\n      phoneNumber = _useState8[0],\n      setPhoneNumber = _useState8[1];\n\n  var _useState9 = useState(false),\n      _useState10 = _slicedToArray(_useState9, 2),\n      resendLoading = _useState10[0],\n      setResendLoading = _useState10[1];\n\n  var _useState11 = useState(RESEND_OTP_TIME_LIMIT),\n      _useState12 = _slicedToArray(_useState11, 2),\n      resendButtonDisabledTime = _useState12[0],\n      setResendButtonDisabledTime = _useState12[1];\n\n  useEffect(function () {\n    startResendOtpTimer();\n    return function () {\n      if (resendOtpTimerInterval) {\n        clearInterval(resendOtpTimerInterval);\n      }\n    };\n  }, [resendButtonDisabledTime]);\n\n  function startResendOtpTimer() {\n    if (resendOtpTimerInterval) {\n      clearInterval(resendOtpTimerInterval);\n    }\n\n    resendOtpTimerInterval = setInterval(function () {\n      if (resendButtonDisabledTime <= 0) {\n        clearInterval(resendOtpTimerInterval);\n      } else {\n        setResendButtonDisabledTime(resendButtonDisabledTime - 1);\n      }\n    }, 1000);\n  }\n\n  function handleGetVerificationId(values) {\n    var phoneNumber, recaptchaVerifierCurrent, _verificationId;\n\n    return _regeneratorRuntime.async(function handleGetVerificationId$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            phoneNumber = values.phoneNumber;\n            recaptchaVerifierCurrent = recaptchaVerifier.current;\n            _context.prev = 2;\n            _context.next = 5;\n            return _regeneratorRuntime.awrap(getVerificationId({\n              phoneNumber: phoneNumber,\n              recaptchaVerifierCurrent: recaptchaVerifierCurrent\n            }));\n\n          case 5:\n            _verificationId = _context.sent;\n            setPhoneNumber(phoneNumber);\n            setVerificationId(_verificationId);\n            startResendOtpTimer();\n            _context.next = 14;\n            break;\n\n          case 11:\n            _context.prev = 11;\n            _context.t0 = _context[\"catch\"](2);\n            setCodeError(_context.t0.message);\n\n          case 14:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[2, 11]], Promise);\n  }\n\n  function handleLogin(values) {\n    var verificationCode;\n    return _regeneratorRuntime.async(function handleLogin$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            verificationCode = values.verificationCode;\n            _context2.prev = 1;\n            _context2.next = 4;\n            return _regeneratorRuntime.awrap(firebaseLogin({\n              verificationCode: verificationCode,\n              verificationId: verificationId\n            }));\n\n          case 4:\n            _context2.next = 9;\n            break;\n\n          case 6:\n            _context2.prev = 6;\n            _context2.t0 = _context2[\"catch\"](1);\n            setLoginError(_context2.t0.message);\n\n          case 9:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[1, 6]], Promise);\n  }\n\n  return _jsxs(SafeView, {\n    style: styles.container,\n    children: [_jsx(FirebaseRecaptchaVerifierModal, {\n      ref: recaptchaVerifier,\n      firebaseConfig: firebaseConfig\n    }), !verificationId && _jsxs(Form, {\n      initialValues: {\n        phoneNumber: \"\"\n      },\n      validationSchema: validationSchemaPhone,\n      onSubmit: function _callee(values) {\n        return _regeneratorRuntime.async(function _callee$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return _regeneratorRuntime.awrap(handleGetVerificationId(values));\n\n              case 2:\n                return _context3.abrupt(\"return\", _context3.sent);\n\n              case 3:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      },\n      children: [_jsx(FormField, {\n        name: \"phoneNumber\",\n        leftIcon: \"phone\",\n        placeholder: \"Enter phone number\",\n        autoCapitalize: \"none\",\n        keyboardType: \"phone-pad\",\n        autoFocus: true\n      }), _jsx(FormButton, {\n        title: \"send code\"\n      }), _jsx(FormErrorMessage, {\n        error: codeError,\n        visible: true\n      })]\n    }), verificationId && _jsxs(Form, {\n      initialValues: {\n        verificationCode: \"\"\n      },\n      validationSchema: validationSchemaCode,\n      onSubmit: function _callee2(values) {\n        return _regeneratorRuntime.async(function _callee2$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return _regeneratorRuntime.awrap(handleLogin(values));\n\n              case 2:\n                return _context4.abrupt(\"return\", _context4.sent);\n\n              case 3:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      },\n      children: [_jsx(FormField, {\n        name: \"verificationCode\",\n        placeholder: \"Enter code\",\n        autoCapitalize: \"none\",\n        keyboardType: \"phone-pad\",\n        autoFocus: true\n      }), _jsxs(View, {\n        style: styles.flexRow,\n        children: [_jsx(Text, {\n          style: styles.resendText,\n          onPress: function onPress() {\n            setVerificationId(null);\n            setPhoneNumber(null);\n          },\n          children: \"Wrong number?\"\n        }), _jsxs(View, {\n          children: [resendLoading && _jsx(Spinner, {}), resendButtonDisabledTime > 0 ? !resendLoading && _jsxs(Text, {\n            style: styles.resendText,\n            children: [\"Resend otp in \", resendButtonDisabledTime]\n          }) : !resendLoading && _jsx(Text, {\n            style: styles.resendText,\n            onPress: function _callee3() {\n              var values;\n              return _regeneratorRuntime.async(function _callee3$(_context5) {\n                while (1) {\n                  switch (_context5.prev = _context5.next) {\n                    case 0:\n                      setResendLoading(true);\n                      values = {\n                        phoneNumber: phoneNumber\n                      };\n                      _context5.next = 4;\n                      return _regeneratorRuntime.awrap(handleGetVerificationId(values));\n\n                    case 4:\n                      setResendLoading(false);\n                      RESEND_OTP_TIME_LIMIT = RESEND_OTP_TIME_LIMIT + 30;\n                      setResendButtonDisabledTime(RESEND_OTP_TIME_LIMIT);\n\n                    case 7:\n                    case \"end\":\n                      return _context5.stop();\n                  }\n                }\n              }, null, null, null, Promise);\n            },\n            children: \"Resend otp\"\n          })]\n        })]\n      }), _jsx(FormButton, {\n        title: \"login\"\n      }), _jsx(FormErrorMessage, {\n        error: loginError,\n        visible: true\n      })]\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    padding: 15,\n    backgroundColor: Colors.primary,\n    justifyContent: \"center\"\n  },\n  footerButtonContainer: {\n    marginVertical: 15,\n    justifyContent: \"center\",\n    alignItems: \"center\"\n  },\n  forgotPasswordButtonText: {\n    color: Colors.white,\n    fontSize: 18,\n    fontWeight: \"600\"\n  },\n  resendText: {\n    fontSize: 14,\n    color: Colors.secondary,\n    textAlign: \"center\"\n  },\n  flexRow: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n    paddingHorizontal: 10\n  }\n});","map":{"version":3,"sources":["C:/Users/syeda/Desktop/Github/Projects/Worketzy/Src/Screens/Login_Sign_up_Screens/Login_Jseeker/Login_Jseeker.jsx"],"names":["React","useEffect","useRef","useState","FirebaseRecaptchaVerifierModal","firebaseLogin","getVerificationId","firebaseConfig","Form","FormErrorMessage","FormButton","FormField","SafeView","Spinner","Colors","validationSchemaPhone","validationSchemaCode","RESEND_OTP_TIME_LIMIT","resendOtpTimerInterval","LoginScreen","navigation","recaptchaVerifier","loginError","setLoginError","verificationId","setVerificationId","codeError","setCodeError","phoneNumber","setPhoneNumber","resendLoading","setResendLoading","resendButtonDisabledTime","setResendButtonDisabledTime","startResendOtpTimer","clearInterval","setInterval","handleGetVerificationId","values","recaptchaVerifierCurrent","current","message","handleLogin","verificationCode","styles","container","flexRow","resendText","StyleSheet","create","padding","backgroundColor","primary","justifyContent","footerButtonContainer","marginVertical","alignItems","forgotPasswordButtonText","color","white","fontSize","fontWeight","secondary","textAlign","display","flexDirection","paddingHorizontal"],"mappings":"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","sourcesContent":["import { StyleSheet, Text, View } from 'react-native';\r\nimport React, { useEffect, useRef, useState } from 'react';\r\nimport { FirebaseRecaptchaVerifierModal } from 'expo-firebase-recaptcha';\r\nimport { firebaseLogin, getVerificationId } from '../../../Components/firebase/firebase';\r\nimport firebaseConfig from '../../../Components/firebase/firebaseConfig';\r\nimport Form from '../../../Components/forms/form';\r\nimport FormErrorMessage from '../../../Components/forms/formErrorMessage';\r\nimport FormButton from '../../../Components/forms/formButton';\r\nimport FormField from '../../../Components/forms/formField';\r\nimport SafeView from '../../../Components/safeView'; \r\nimport Spinner from '../../../Components/spinner';\r\nimport Colors from '../../../utils/Colors'\r\nimport { validationSchemaPhone, validationSchemaCode } from '../../../Validation/InputValidation';\r\n\r\nlet RESEND_OTP_TIME_LIMIT = 30;\r\nlet resendOtpTimerInterval;\r\n\r\n\r\nexport default function LoginScreen({ navigation }) {\r\n  const recaptchaVerifier = useRef(null);\r\n  const [loginError, setLoginError] = useState(\"\");\r\n  const [verificationId, setVerificationId] = useState(null);\r\n  const [codeError, setCodeError] = useState(\"\");\r\n  const [phoneNumber, setPhoneNumber] = useState(null);\r\n  const [resendLoading, setResendLoading] = useState(false);\r\n  const [resendButtonDisabledTime, setResendButtonDisabledTime] = useState(\r\n    RESEND_OTP_TIME_LIMIT\r\n  );\r\n\r\n  useEffect(() => {\r\n    startResendOtpTimer();\r\n\r\n    return () => {\r\n      if (resendOtpTimerInterval) {\r\n        clearInterval(resendOtpTimerInterval);\r\n      }\r\n    };\r\n  }, [resendButtonDisabledTime]);\r\n\r\n  function startResendOtpTimer() {\r\n    if (resendOtpTimerInterval) {\r\n      clearInterval(resendOtpTimerInterval);\r\n    }\r\n    resendOtpTimerInterval = setInterval(() => {\r\n      if (resendButtonDisabledTime <= 0) {\r\n        clearInterval(resendOtpTimerInterval);\r\n      } else {\r\n        setResendButtonDisabledTime(resendButtonDisabledTime - 1);\r\n      }\r\n    }, 1000);\r\n  }\r\n\r\n  async function handleGetVerificationId(values) {\r\n    const { phoneNumber } = values;\r\n    const recaptchaVerifierCurrent = recaptchaVerifier.current;\r\n    try {\r\n      let verificationId = await getVerificationId({\r\n        phoneNumber,\r\n        recaptchaVerifierCurrent,\r\n      });\r\n      setPhoneNumber(phoneNumber);\r\n      setVerificationId(verificationId);\r\n\r\n      startResendOtpTimer();\r\n    } catch (error) {\r\n      setCodeError(error.message);\r\n    }\r\n  }\r\n\r\n  async function handleLogin(values) {\r\n    const { verificationCode } = values;\r\n    try {\r\n      await firebaseLogin({ verificationCode, verificationId });\r\n    } catch (error) {\r\n      setLoginError(error.message);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <SafeView style={styles.container}>\r\n      <FirebaseRecaptchaVerifierModal\r\n        ref={recaptchaVerifier}\r\n        firebaseConfig={firebaseConfig}\r\n      />\r\n\r\n      {!verificationId && (\r\n        <Form\r\n          initialValues={{ phoneNumber: \"\" }}\r\n          validationSchema={validationSchemaPhone}\r\n          onSubmit={async (values) => await handleGetVerificationId(values)}\r\n        >\r\n          <FormField\r\n            name=\"phoneNumber\"\r\n            leftIcon=\"phone\"\r\n            placeholder=\"Enter phone number\"\r\n            autoCapitalize=\"none\"\r\n            keyboardType=\"phone-pad\"\r\n            autoFocus={true}\r\n          />\r\n          <FormButton title={\"send code\"} />\r\n          {<FormErrorMessage error={codeError} visible={true} />}\r\n        </Form>\r\n      )}\r\n      {verificationId && (\r\n        <Form\r\n          initialValues={{ verificationCode: \"\" }}\r\n          validationSchema={validationSchemaCode}\r\n          onSubmit={async (values) => await handleLogin(values)}\r\n        >\r\n          <FormField\r\n            name=\"verificationCode\"\r\n            placeholder=\"Enter code\"\r\n            autoCapitalize=\"none\"\r\n            keyboardType=\"phone-pad\"\r\n            autoFocus={true}\r\n          />\r\n          <View style={styles.flexRow}>\r\n            <Text\r\n              style={styles.resendText}\r\n              onPress={() => {\r\n                setVerificationId(null);\r\n                setPhoneNumber(null);\r\n              }}\r\n            >\r\n              Wrong number?\r\n            </Text>\r\n            <View>\r\n              {resendLoading && <Spinner />}\r\n              {resendButtonDisabledTime > 0\r\n                ? !resendLoading && (\r\n                    <Text style={styles.resendText}>\r\n                      Resend otp in {resendButtonDisabledTime}\r\n                    </Text>\r\n                  )\r\n                : !resendLoading && (\r\n                    <Text\r\n                      style={styles.resendText}\r\n                      onPress={async () => {\r\n                        setResendLoading(true);\r\n                        let values = { phoneNumber };\r\n                        await handleGetVerificationId(values);\r\n                        setResendLoading(false);\r\n                        RESEND_OTP_TIME_LIMIT = RESEND_OTP_TIME_LIMIT + 30;\r\n                        setResendButtonDisabledTime(RESEND_OTP_TIME_LIMIT);\r\n                      }}\r\n                    >\r\n                      Resend otp\r\n                    </Text>\r\n                  )}\r\n            </View>\r\n          </View>\r\n\r\n          <FormButton title={\"login\"} />\r\n          {<FormErrorMessage error={loginError} visible={true} />}\r\n        </Form>\r\n      )}\r\n    </SafeView>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    padding: 15,\r\n    backgroundColor: Colors.primary,\r\n    justifyContent: \"center\",\r\n  },\r\n  footerButtonContainer: {\r\n    marginVertical: 15,\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n  },\r\n  forgotPasswordButtonText: {\r\n    color: Colors.white,\r\n    fontSize: 18,\r\n    fontWeight: \"600\",\r\n  },\r\n  resendText: {\r\n    fontSize: 14,\r\n    color: Colors.secondary,\r\n    textAlign: \"center\",\r\n  },\r\n  flexRow: {\r\n    display: \"flex\",\r\n    flexDirection: \"row\",\r\n    justifyContent: \"space-between\",\r\n    paddingHorizontal: 10,\r\n  },\r\n});\r\n"]},"metadata":{},"sourceType":"module"}